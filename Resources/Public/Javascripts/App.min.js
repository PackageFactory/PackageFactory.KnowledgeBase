(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ComponentDomParser = require("componentdomparser");

// Initialize a new instance of the ComponentDomParser.
var Parser = new ComponentDomParser({
  dataSelector: 'app',
  componentIndex: {
  }
});

// Parse the document for all [data-app] nodes.
Parser.parse();

},{"componentdomparser":2}],2:[function(require,module,exports){
/* ComponentDomParser 0.0.1 | @license ISC */

(function (global, factory) {
    "use strict";

    // If the env is browserify, export the factory using the module object.
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = factory(global);

        // If the env is AMD, register the Module as 'ComponentDomParser'.
    } else if (global.define && typeof global.define === "function" && global.define.amd) {
        global.define("ComponentDomParser", [], function () {
            return factory(global);
        });

        // If the env is a browser(without CJS or AMD support), export the factory into the global window object.
    } else {
        global.ComponentDomParser = factory(global);
    }
})(window, function (global) {
    "use strict";

    var doc = global.document;

    /*
     * ComponentDomParser
     * @param options {Object} The options Object which initializes the parser.
     * @example
     * // Initialize a new instance of the ComponentDomParser.
     * var parser = new window.ComponentDomParser({
     *     dataSelector: 'app',
     *     componentIndex: {
     *         'myApplication': function(el) { el.innerHTML = 'myApplication initialized!' }
     *     },
     *     componentDidMountCallback: function(instance) {
     *         console.log(instance);
     *     }
     * });
     *
     * // Parse the document for all [data-app] nodes.
     * parser.parse();
     * @constructor
     */
    var ComponentDomParser = function (options) {
        this._checkForRequiredConstants(options);

        this.contextElement = options.contextElement || doc.body;
        this.dataSelector = options.dataSelector;
        this.componentIndex = options.componentIndex;
        this.componentDidMountCallback = options.componentDidMountCallback;
    };

    ComponentDomParser.prototype._checkForRequiredConstants = function (options) {
        if (!options) {
            throw new Error("ComponentDomParser Error: No option object was specified.");
        }

        if (!options.dataSelector) {
            throw new Error("ComponentDomParser Error: No dataSelector was specified.");
        }

        if (!options.componentIndex) {
            throw new Error("ComponentDomParser Error: No componentIndex was specified.");
        }

        if (options.componentDidMountCallback && typeof options.componentDidMountCallback !== "function") {
            throw new Error("ComponentDomParser Error: The componentDidMountCallback option must be a function.");
        }
    };

    ComponentDomParser.prototype.parse = function () {
        var elementNodeList = this.contextElement.querySelectorAll("[data-" + this.dataSelector + "]");
        var elementNodes = Array.prototype.slice.call(elementNodeList, 0);
        var self = this;

        elementNodes.forEach(function (node) {
            var componentKey = node.dataset[self.dataSelector];
            var Component = self.componentIndex[componentKey];

            if (Component) {
                self._mountComponent(node, Component);
            } else {
                console.info("ComponentDomParser Info: Component \"" + componentKey + "\" is not present in the passed componentIndex:", self.componentIndex);
            }
        });

        return this;
    };

    ComponentDomParser.prototype._mountComponent = function (node, Component) {
        var instance = new Component(node);

        if (this.componentDidMountCallback) {
            this.componentDidMountCallback(instance);
        }

        return instance;
    };


    return ComponentDomParser;
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3diZWhuY2tlL1dvcmtzcGFjZXMvUGFja0VkZ2UvS25vd2xlZGdlQmFzZS9QYWNrYWdlcy9BcHBsaWNhdGlvbi9QYWNrYWdlRmFjdG9yeS5Lbm93bGVkZ2VCYXNlL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS93YmVobmNrZS9Xb3Jrc3BhY2VzL1BhY2tFZGdlL0tub3dsZWRnZUJhc2UvUGFja2FnZXMvQXBwbGljYXRpb24vUGFja2FnZUZhY3RvcnkuS25vd2xlZGdlQmFzZS9SZXNvdXJjZXMvUHJpdmF0ZS9KYXZhc2NyaXB0cy9BcHAuanMiLCIvaG9tZS93YmVobmNrZS9Xb3Jrc3BhY2VzL1BhY2tFZGdlL0tub3dsZWRnZUJhc2UvUGFja2FnZXMvQXBwbGljYXRpb24vUGFja2FnZUZhY3RvcnkuS25vd2xlZGdlQmFzZS9ub2RlX21vZHVsZXMvY29tcG9uZW50ZG9tcGFyc2VyL0Rpc3QvQ29tcG9uZW50RG9tUGFyc2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBDb21wb25lbnREb21QYXJzZXIgPSByZXF1aXJlKFwiY29tcG9uZW50ZG9tcGFyc2VyXCIpO1xuXG4vLyBJbml0aWFsaXplIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBDb21wb25lbnREb21QYXJzZXIuXG52YXIgUGFyc2VyID0gbmV3IENvbXBvbmVudERvbVBhcnNlcih7XG4gIGRhdGFTZWxlY3RvcjogJ2FwcCcsXG4gIGNvbXBvbmVudEluZGV4OiB7XG4gIH1cbn0pO1xuXG4vLyBQYXJzZSB0aGUgZG9jdW1lbnQgZm9yIGFsbCBbZGF0YS1hcHBdIG5vZGVzLlxuUGFyc2VyLnBhcnNlKCk7XG4iLCIvKiBDb21wb25lbnREb21QYXJzZXIgMC4wLjEgfCBAbGljZW5zZSBJU0MgKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIElmIHRoZSBlbnYgaXMgYnJvd3NlcmlmeSwgZXhwb3J0IHRoZSBmYWN0b3J5IHVzaW5nIHRoZSBtb2R1bGUgb2JqZWN0LlxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZ2xvYmFsKTtcblxuICAgICAgICAvLyBJZiB0aGUgZW52IGlzIEFNRCwgcmVnaXN0ZXIgdGhlIE1vZHVsZSBhcyAnQ29tcG9uZW50RG9tUGFyc2VyJy5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5kZWZpbmUgJiYgdHlwZW9mIGdsb2JhbC5kZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBnbG9iYWwuZGVmaW5lLmFtZCkge1xuICAgICAgICBnbG9iYWwuZGVmaW5lKFwiQ29tcG9uZW50RG9tUGFyc2VyXCIsIFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeShnbG9iYWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiB0aGUgZW52IGlzIGEgYnJvd3Nlcih3aXRob3V0IENKUyBvciBBTUQgc3VwcG9ydCksIGV4cG9ydCB0aGUgZmFjdG9yeSBpbnRvIHRoZSBnbG9iYWwgd2luZG93IG9iamVjdC5cbiAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWwuQ29tcG9uZW50RG9tUGFyc2VyID0gZmFjdG9yeShnbG9iYWwpO1xuICAgIH1cbn0pKHdpbmRvdywgZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcblxuICAgIC8qXG4gICAgICogQ29tcG9uZW50RG9tUGFyc2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMge09iamVjdH0gVGhlIG9wdGlvbnMgT2JqZWN0IHdoaWNoIGluaXRpYWxpemVzIHRoZSBwYXJzZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBJbml0aWFsaXplIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBDb21wb25lbnREb21QYXJzZXIuXG4gICAgICogdmFyIHBhcnNlciA9IG5ldyB3aW5kb3cuQ29tcG9uZW50RG9tUGFyc2VyKHtcbiAgICAgKiAgICAgZGF0YVNlbGVjdG9yOiAnYXBwJyxcbiAgICAgKiAgICAgY29tcG9uZW50SW5kZXg6IHtcbiAgICAgKiAgICAgICAgICdteUFwcGxpY2F0aW9uJzogZnVuY3Rpb24oZWwpIHsgZWwuaW5uZXJIVE1MID0gJ215QXBwbGljYXRpb24gaW5pdGlhbGl6ZWQhJyB9XG4gICAgICogICAgIH0sXG4gICAgICogICAgIGNvbXBvbmVudERpZE1vdW50Q2FsbGJhY2s6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICogICAgICAgICBjb25zb2xlLmxvZyhpbnN0YW5jZSk7XG4gICAgICogICAgIH1cbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFBhcnNlIHRoZSBkb2N1bWVudCBmb3IgYWxsIFtkYXRhLWFwcF0gbm9kZXMuXG4gICAgICogcGFyc2VyLnBhcnNlKCk7XG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgdmFyIENvbXBvbmVudERvbVBhcnNlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrRm9yUmVxdWlyZWRDb25zdGFudHMob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jb250ZXh0RWxlbWVudCA9IG9wdGlvbnMuY29udGV4dEVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gICAgICAgIHRoaXMuZGF0YVNlbGVjdG9yID0gb3B0aW9ucy5kYXRhU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29tcG9uZW50SW5kZXggPSBvcHRpb25zLmNvbXBvbmVudEluZGV4O1xuICAgICAgICB0aGlzLmNvbXBvbmVudERpZE1vdW50Q2FsbGJhY2sgPSBvcHRpb25zLmNvbXBvbmVudERpZE1vdW50Q2FsbGJhY2s7XG4gICAgfTtcblxuICAgIENvbXBvbmVudERvbVBhcnNlci5wcm90b3R5cGUuX2NoZWNrRm9yUmVxdWlyZWRDb25zdGFudHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudERvbVBhcnNlciBFcnJvcjogTm8gb3B0aW9uIG9iamVjdCB3YXMgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5kYXRhU2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudERvbVBhcnNlciBFcnJvcjogTm8gZGF0YVNlbGVjdG9yIHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmNvbXBvbmVudEluZGV4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnREb21QYXJzZXIgRXJyb3I6IE5vIGNvbXBvbmVudEluZGV4IHdhcyBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY29tcG9uZW50RGlkTW91bnRDYWxsYmFjayAmJiB0eXBlb2Ygb3B0aW9ucy5jb21wb25lbnREaWRNb3VudENhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudERvbVBhcnNlciBFcnJvcjogVGhlIGNvbXBvbmVudERpZE1vdW50Q2FsbGJhY2sgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29tcG9uZW50RG9tUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnROb2RlTGlzdCA9IHRoaXMuY29udGV4dEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLVwiICsgdGhpcy5kYXRhU2VsZWN0b3IgKyBcIl1cIik7XG4gICAgICAgIHZhciBlbGVtZW50Tm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbGVtZW50Tm9kZUxpc3QsIDApO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgZWxlbWVudE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRLZXkgPSBub2RlLmRhdGFzZXRbc2VsZi5kYXRhU2VsZWN0b3JdO1xuICAgICAgICAgICAgdmFyIENvbXBvbmVudCA9IHNlbGYuY29tcG9uZW50SW5kZXhbY29tcG9uZW50S2V5XTtcblxuICAgICAgICAgICAgaWYgKENvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX21vdW50Q29tcG9uZW50KG5vZGUsIENvbXBvbmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkNvbXBvbmVudERvbVBhcnNlciBJbmZvOiBDb21wb25lbnQgXFxcIlwiICsgY29tcG9uZW50S2V5ICsgXCJcXFwiIGlzIG5vdCBwcmVzZW50IGluIHRoZSBwYXNzZWQgY29tcG9uZW50SW5kZXg6XCIsIHNlbGYuY29tcG9uZW50SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgQ29tcG9uZW50RG9tUGFyc2VyLnByb3RvdHlwZS5fbW91bnRDb21wb25lbnQgPSBmdW5jdGlvbiAobm9kZSwgQ29tcG9uZW50KSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb21wb25lbnQobm9kZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50RGlkTW91bnRDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnREaWRNb3VudENhbGxiYWNrKGluc3RhbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG5cbiAgICByZXR1cm4gQ29tcG9uZW50RG9tUGFyc2VyO1xufSk7XG4iXX0=
